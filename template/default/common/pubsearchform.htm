<style>
	#ais-wrapper {
		display: flex;
	}

	#ais-main {
		padding: 1rem;
		width: 100%;
	}

	#ais-facets {
		display: none;
		/*not ready yet*/
		width: 40%;
		padding: 1rem;
	}

	.ais-facets {
		margin-bottom: 2rem;
		padding: 0;
	}

	.ais-facets ul {
		list-style: none;
		padding-left: 0;
		margin-left: 0;
	}

	.ais-facets li {
		margin-left: 0;
	}

	.ais-clearfix {
		clear: both;
	}

	.algolia-search-box-wrapper {
		position: relative;
	}

	.algolia-search-box-wrapper .search-icon {
		position: absolute;
		left: 0px;
		top: 14px;
		fill: #21a4d7;
	}

	#algolia-search-box {
		margin-bottom: 1.5rem;
	}

	#algolia-search-box input {
		border: none;
		border-bottom: 2px solid #21a4d7;
		background: transparent;
		width: 100%;
		line-height: 30px;
		font-size: 22px;
		padding: 10px 0 10px 30px;
		font-weight: 200;
		box-sizing: border-box;
		outline: none;
		box-shadow: none;
		appearance: none;
		-webkit-appearance: none;
		-moz-appearance: none;
		-ms-appearance: none;
	}

	.ais-SearchBox-form {
		display: block;
		position: relative;
	}

	.ais-SearchBox-submit[hidden],
	.ais-SearchBox-reset[hidden],
	.ais-SearchBox-loadingIndicator[hidden] {
		display: none;
	}

	#algolia-powered-by {
		position: absolute;
		top: 60px;
		right: 0;
		font-size: 14px;
		text-align: right;
	}

	.ais-Stats {
		position: absolute;
		top: 60px;
		font-size: 14px;
	}

	.ais-Hits-list {
		list-style: none;
		padding-left: 0;
		margin-left: 0;
	}

	.ais-Hits-item {
		/* hit item */
		margin: 0 0 2rem 0;
	}

	.ais-Hits-item h2 {
		margin: 0;
	}

	.ais-Hits-item em,
	.ais-Hits-item a em,
	.ais-Hits-item mark,
	.ais-Hits-item a mark {
		font-style: normal;
		background: #fffbcc;
		border-radius: 2px;
	}

	.ais-hits--thumbnail {
		float: left;
		margin-right: 2rem;
	}

	.ais-hits--content {
		overflow: hidden;
	}

	.ais-hits--thumbnail img {
		border-radius: 3px;
	}

	.ais-Pagination {
		margin: 0;
	}

	.ais-Pagination-list {
		margin-left: 0;
	}

	.ais-Pagination-item {
		/* Pagination item */
		display: inline-block;
		padding: 3px;
	}

	.ais-Pagination-item--disabled {
		/* disabled Pagination item */
		display: none;
	}

	.ais-Pagination-item--selected {
		font-weight: bold;
	}

	.ais-Menu-item--selected {
		/* active list item */
		font-weight: bold;
	}

	.ais-HierarchicalMenu-item--selected {
		/* Hierarchical Menu: Categories */
		font-weight: bold;
	}

	.ais-Menu-count,
	.ais-HierarchicalMenu-count,
	.ais-RefinementList-count {
		margin-left: 5px;
	}

	.ais-HierarchicalMenu-list--child {
		/* item list level 1 */
		margin-left: 10px;
	}

	.ais-RangeSlider .rheostat {
		overflow: visible;
		margin-top: 40px;
		margin-bottom: 40px;
	}

	.ais-RangeSlider .rheostat-background {
		height: 6px;
		top: 0px;
		width: 100%;
	}

	.ais-RangeSlider .rheostat-handle {
		margin-left: -12px;
		top: -7px;
	}

	.ais-RangeSlider .rheostat-background {
		position: relative;
		background-color: #fff;
		border: 1px solid #003dff;
	}

	.ais-RangeSlider .rheostat-progress {
		position: absolute;
		top: 1px;
		height: 4px;
		background-color: #333;
	}

	.rheostat-handle {
		position: relative;
		z-index: 1;
		width: 20px;
		height: 20px;
		background-color: #fff;
		border: 1px solid #333;
		border-radius: 50%;
		cursor: -webkit-grab;
		cursor: grab;
	}

	.rheostat-marker {
		margin-left: -1px;
		position: absolute;
		width: 1px;
		height: 5px;
		background-color: #aaa;
	}

	.rheostat-marker--large {
		height: 9px;
	}

	.rheostat-value {
		margin-left: 50%;
		padding-top: 15px;
		position: absolute;
		text-align: center;
		-webkit-transform: translateX(-50%);
		transform: translateX(-50%);
	}

	.rheostat-tooltip {
		margin-left: 50%;
		position: absolute;
		top: -22px;
		text-align: center;
		-webkit-transform: translateX(-50%);
		transform: translateX(-50%);
	}

	.ais-RatingMenu-item {
		/* list item */
		vertical-align: middle;
	}

	.ais-RatingMenu-item--selected {
		/* active list item */
		font-weight: bold;
	}

	.ais-RatingMenu-starIcon {
		/* item star */
		display: inline-block;
		width: 1em;
		height: 1em;
	}

	.ais-RatingMenu-starIcon:before {
		content: '\2605';
		color: #fbae00;
	}

	.ais-RatingMenu-starIcon--empty {
		/* empty star */
		display: inline-block;
		width: 1em;
		height: 1em;
	}

	.ais-RatingMenu-starIcon--empty:before {
		content: '\2606';
		color: #fbae00;
	}

	.ais-RatingMenu-item--disabled .ais-star-rating--star:before {
		color: #c9c9c9;
	}

	.ais-RatingMenu-item--disabled .ais-star-rating--star__empty:before {
		color: #c9c9c9;
	}

	.ais-root__collapsible .ais-header {
		cursor: pointer;
	}

	.ais-root__collapsed .ais-body,
	.ais-root__collapsed .ais-footer {
		display: none;
	}

	/* Responsive */
	@media only screen and (max-width: 1000px) {
		#ais-facets {
			display: none;
		}

		.ais-hits--thumbnail img {
			width: 100% !important;
		}

		.ais-Hits-item {
			border-bottom: 1px solid gainsboro;
			padding-bottom: 23px;
		}
	}

	@media only screen and (max-width: 500px) {
		.ais-hits--thumbnail {
			margin-right: 0 !important;
			margin-bottom: 10px;
			float: none !important;
		}
	}
</style>
<div id="ais-wrapper">
	<main id="ais-main">
		<div class="algolia-search-box-wrapper">
			<div id="algolia-search-box"></div>
			<svg class="search-icon" width="25" height="25" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
				<path
					d="M24.828 31.657a16.76 16.76 0 0 1-7.992 2.015C7.538 33.672 0 26.134 0 16.836 0 7.538 7.538 0 16.836 0c9.298 0 16.836 7.538 16.836 16.836 0 3.22-.905 6.23-2.475 8.79.288.18.56.395.81.645l5.985 5.986A4.54 4.54 0 0 1 38 38.673a4.535 4.535 0 0 1-6.417-.007l-5.986-5.986a4.545 4.545 0 0 1-.77-1.023zm-7.992-4.046c5.95 0 10.775-4.823 10.775-10.774 0-5.95-4.823-10.775-10.774-10.775-5.95 0-10.775 4.825-10.775 10.776 0 5.95 4.825 10.775 10.776 10.775z"
					fill-rule="evenodd"></path>
			</svg>
			<div id="algolia-stats"></div>
			<div id="algolia-powered-by"></div>
		</div>
		<div id="algolia-hits"></div>
		<div id="algolia-pagination"></div>
	</main>
</div>
<aside id="ais-facets">
	<div>
		<h3 class="widgettitle">
			Forum
		</h3>
		<section class="ais-facets" id="facet-categories"></section>
	</div>
	<div>
		<h3 class="widgettitle">
			Tags
		</h3>
		<section class="ais-facets" id="facet-tags"></section>
	</div>
	<div>
		<h3 class="widgettitle">
			Author
		</h3>
		<section class="ais-facets" id="facet-users"></section>
	</div>
</aside>
<script src="https://cdn.jsdelivr.net/npm/algoliasearch@5.23.0/dist/lite/builds/browser.umd.js"
	integrity="sha256-pfKeJRuGRsHDNu078bcMlWdxjw/Vgz5QLC6hyLFw9fA=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/instantsearch.js@4.78.1/dist/instantsearch.production.min.js"
	integrity="sha256-ev+/eO2lcqeanteOezwkK4FfnLtzCtiM8QhExgHoxeM=" crossorigin="anonymous"></script>
<script>
	const { liteClient: algoliasearch } = window['algoliasearch/lite'];
	window.addEventListener('load', function () {
		if (document.getElementById("algolia-search-box")) {
			/* Instantiate instantsearch.js */
			var search = instantsearch({
				searchFunction: function (helper) {
					if (helper.state.query === '') {
						return;
					}
					helper.search();
				},
				indexName: 'kuing',
				searchClient: algoliasearch('KZZUGXICHQ', 'cfaa3668ecea0bce830d62fc30f4d0dd'),
				routing: {
					router: instantsearch.routers.history({ writeDelay: 1000 }),
					stateMapping: {
						stateToRoute(indexUiState) {
							return {
								s: indexUiState['kuing'].query,
								page: indexUiState['kuing'].page
							}
						},
						routeToState(routeState) {
							const indexUiState = {};
							indexUiState['kuing'] = {
								query: routeState.s,
								page: routeState.page
							};
							return indexUiState;
						}
					}
				}
			});

			search.addWidgets([

				/* Search box widget */
				instantsearch.widgets.searchBox({
					container: '#algolia-search-box',
					placeholder: 'Search for...',
					showReset: false,
					showSubmit: false,
					showLoadingIndicator: false,
				}),

				/* Stats widget */
				instantsearch.widgets.stats({
					container: '#algolia-stats'
				}),

				instantsearch.widgets.configure({
					hitsPerPage: 5,
				}),

				/* Hits widget */
				instantsearch.widgets.hits({
					container: '#algolia-hits',
					templates: {
						empty(results, { html }) { return '未找到与 <strong>' + results.query + '</strong> 相关的结果。'; },
						item(data, { html, components }) {
							return `<article itemtype="http://schema.org/Article">
		<div class="ais-hits--content">
			<h2 itemprop="name headline"><a href="${data.objectID}" class="ais-hits--title-link" itemprop="url">${data.title}</a></h2>
			<div class="excerpt">
				<p>
					<span class="suggestion-post-content ais-hits--content-snippet">${data._snippetResult['content'].value}</span>
				</p>
			</div>
		</div>
		<div class="ais-clearfix"></div>
	</article>`;
						}
					},
					transformData: {
						item: function (hit) {

							function replace_highlights_recursive(item) {
								if (item instanceof Object && item.hasOwnProperty('value')) {
									item.value = _.escape(item.value);
									item.value = item.value.replace(/__ais-highlight__/g, '<em>').replace(/__\/ais-highlight__/g, '</em>');
								} else {
									for (var key in item) {
										item[key] = replace_highlights_recursive(item[key]);
									}
								}
								return item;
							}

							hit._highlightResult = replace_highlights_recursive(hit._highlightResult);
							hit._snippetResult = replace_highlights_recursive(hit._snippetResult);

							return hit;
						}
					}
				}),

				/* Pagination widget */
				instantsearch.widgets.pagination({
					container: '#algolia-pagination'
				}),

				/* Categories refinement widget */
				instantsearch.widgets.refinementList({
					container: '#facet-categories',
					attribute: 'forum',
					separator: ' > ',
					sortBy: ['count']
				}),

				/* Tags refinement widget */
				instantsearch.widgets.refinementList({
					container: '#facet-tags',
					attribute: 'keyword',
					operator: 'and',
					limit: 15,
					sortBy: ['isRefined:desc', 'count:desc', 'name:asc'],
				}),

				/* Users refinement widget */
				instantsearch.widgets.menu({
					container: '#facet-users',
					attribute: 'author',
					sortBy: ['isRefined:desc', 'count:desc', 'name:asc'],
					limit: 10,
				})
			]);

			/* Start */
			search.start();

			// This needs work
			// document.querySelector("#algolia-search-box input[type='search']").select()
		}
	});
</script>